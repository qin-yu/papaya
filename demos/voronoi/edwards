#!/usr/bin/env python
# -*- coding: utf-8 -*-
# delaunay  -- reads a point pattern from a .xyz file,
# calculates the Delaunay triangulation (using appropriate BC)
# and calculates Edwards' Tensor
# (contributed by Walter Mickel)
import os
import sys
import xyz
import bc
import tempfile
import qhulldriver
from shared import die, break_line_into_string
from scipy.linalg import eig_banded, eigvals, eigvalsh, eigh

# read .xyz data
infile = sys.argv[1]
(germs,comment) = xyz.read_xyz_with_comment (infile)
num_original_points = len (germs)
voronoi_dump_file = None
bounds_override = None

# do we want a dump of the Voronoi data?
if '--dump' in sys.argv:
    z = sys.argv.index ('--dump') + 1
    voronoi_dump_file = sys.argv[z]
    
writeNNlist=False
if '--writeNN' in sys.argv:
	writeNNlist=True

# override bounds?
if '--bounds' in sys.argv:
    z = sys.argv.index ('--bounds') + 1
    bounds_override = sys.argv[z]

germs = [ (p[1],p[2]) for p in germs ]

# we include some parameters of the dataset in the xyz comment
data_from_comment = xyz.split_comment (comment)

analyze = [] # says whether we'll run the cell generated by
             # this germ through Papaya.

#create data-dir
outdir = infile + "_Edwards"
if os.system ('if [ ! -d %s ]; then mkdir %s ; fi ' % (outdir,outdir) ) != 0:
    die ("mkdir failed")

bounds = data_from_comment['boundary_condition']
if bounds_override:
    bounds = bounds_override

# treat boundary conditions
if bounds == 'periodic_rectangular' or bounds == 'periodic_rectangular_4p':
    sizex = None
    sizey = None
    xlo = 0.
    ylo = 0.
    if bounds == 'periodic_rectangular_4p':
        # Walter's format
        xhi = float (data_from_comment['boxsz_xhi'])
        yhi = float (data_from_comment['boxsz_yhi'])
        xlo = float (data_from_comment['boxsz_xlo'])
        ylo = float (data_from_comment['boxsz_ylo'])
        sizex = xhi-xlo
        sizey = yhi-ylo
    else:
        sizex = float (data_from_comment['boxsz_x'])
        sizey = float (data_from_comment['boxsz_y'])
    # sanity check that all germs are within the box
    bc.check_germs (germs, xlo, ylo, sizex, sizey)

    germs.extend (bc.add_periodic_copies (germs,
        (sizex,sizey),
        [(sizex,0.), (0.,sizey), (sizex,sizey),
         (-sizex,0.), (0.,-sizey), (sizex,-sizey), (-sizex,sizey), (-sizex,-sizey)],
        overlap_factor = .2))
    # new points only are appended; we're interested in the
    # first $num_original_points germs in the list.
    analyze = [True] * num_original_points
    analyze.append ([False] * (len (germs) - num_original_points))

elif bounds == 'periodic_hexagonal':
    # "hexagonal" bc -- we expect a rectangle here, but with particular
    # boundary conditions. this equivalent to real hexagons tiling the plane.
    sizex = float (data_from_comment['boxsz_x'])
    sizey = float (data_from_comment['boxsz_y'])
    # sanity check that all germs are within the box
    bc.check_germs (germs, 0., 0., sizex, sizey)

    germs.extend (bc.add_periodic_copies (germs,
        (sizex,sizey),
        [(sizex,.5*sizey), (0.,sizey), (sizex,-.5*sizey),
         (-sizex,.5*sizey), (0.,-sizey), (-sizex,-.5*sizey)],
        overlap_factor = .2))
    # new points only are appended; we're interested in the
    # first $num_original_points germs in the list.
    analyze = [True] * num_original_points
    analyze.append ([False] * (len (germs) - num_original_points))

elif bounds == 'minus_sample_rectangular':
    # ignore the outer 10% of the data
    # no periodic padding is done.
    sizex = float (data_from_comment['boxsz_x'])
    sizey = float (data_from_comment['boxsz_y'])
    analyze = [True] * num_original_points
    num_dropped_points = 0
    for i in range (num_original_points):
        if abs (germs[i][0] - .5*sizex) > .4*sizex or \
                abs (germs[i][1] - .5*sizey) > .4*sizey:
            analyze[i] = False
            num_dropped_points += 1
    print >>sys.stderr, '[%s] dropping %i of the %i germs' %\
        ('minus_sample_rectangular', num_dropped_points, num_original_points)

else:
    die ('Not implemented')

# we could compute a generalized Voronoi diagram here
# (we don't)
df = 1

# compute Voronoi diagram; 
voro = qhulldriver.qdelaunay (germs)

# write asser mit Euler-Beziehung
#assert len (germs) == len (voro.polys)

#get coordination number and create lookup for Edwards
nn=[]
nnlist=[]
ED=[]
for i in xrange(len(germs)):
	nn.append(0) # coordination numer
	nnlist.append([i]) # lookup
	ED.append([[0,0],[0,0]]) # Edwards tensors

#build lookup-table (lookup contains all neighbors and the point itself on first position)
for i in xrange(len(voro.polys)):
	for j in xrange(len(voro.polys[i])-1):
		labelJ=voro.polys[i][j+1]
		nn[labelJ]+=1 ## next neighbor
		for k in xrange(len(voro.polys[i])-1):
			for m in xrange(len(nnlist[labelJ])):
				labelK=voro.polys[i][k+1]
				if nnlist[labelJ].count(labelK)==0:
					nnlist[labelJ].append(labelK)
					
#compute Edwards tensor (with lookup)
for i in xrange(num_original_points*df):
	centerspherelabel=i
	#if centerspherelabel==34:
		#print voro.coords[centerspherelabel][0],voro.coords[centerspherelabel][1]
	for j in xrange(len(nnlist[i])):
		nnlabel=nnlist[i][j]
		EDxx=(voro.coords[centerspherelabel][0]-voro.coords[nnlabel][0])*(voro.coords[centerspherelabel][0]-voro.coords[nnlabel][0])
		EDyy=(voro.coords[centerspherelabel][1]-voro.coords[nnlabel][1])*(voro.coords[centerspherelabel][1]-voro.coords[nnlabel][1])
		EDxy=(voro.coords[centerspherelabel][1]-voro.coords[nnlabel][1])*(voro.coords[centerspherelabel][0]-voro.coords[nnlabel][0])
		#print eigvals([[EDxx,EDxy],[EDxy,EDyy]])
		#if centerspherelabel==34:
			#print nnlabel, voro.coords[nnlabel][0], voro.coords[nnlabel][1], EDxx,EDyy, EDxy
			
		ED[i][0][0]+=EDxx
		ED[i][1][0]+=EDxy
		ED[i][0][1]+=EDxy
		ED[i][1][1]+=EDyy
	
	#if centerspherelabel==34:
		#print ED[i]
		#print eigvalsh(ED[i])

EDdiag=[]
for i in xrange(num_original_points*df):
	(evs,evecs)=eigh(ED[i])
	for ii in range(0,2):
		if evs[ii].imag != 0:
			print "SOME_EV_COMPLEX ERROR: eigenvalue complex."
			print evs[ii]
			exit(-1)
	assert(evs[0]<=evs[1])
	EDdiag.append((evs,evecs))


# delete cells induced by padding germs
for i in xrange(len(voro.polys)):
	for j in xrange(len(voro.polys[i])-1):
		if (voro.polys[i][j+1]>=df*num_original_points):
			voro.polys[i][0]="deleted"

for i in xrange(len(voro.polys)-1,-1,-1):
	if voro.polys[i][0]=="deleted":
		voro.polys.pop(i)

voro.reindex ()

if voronoi_dump_file:
    voro.save_poly (voronoi_dump_file)

#write data to outdir
ofile=open(outdir+"/z.out",'w') # coordination number
for i in xrange(num_original_points*df):
	ofile.write("%i %s %s %i\n"%(i,germs[i][0],germs[i][1],nn[i]))
ofile.close()

if writeNNlist==True:
	ofile=open(outdir+"/NN.out",'w') # nn list
	for i in xrange(num_original_points*df):
		for j in xrange(len(nnlist[i])):
			ofile.write("%i "%(nnlist[i][j]))
		ofile.write("\t%i \n" %nn[i])
	ofile.close()


ofile=open(outdir+"/ED.out",'w')
for i in xrange(num_original_points*df):
	#				                     id ev_min       ev_max          evec1_x            evec1_y            evec2_x            evec2_y
	ofile.write("%i %12e %12e %12e %12e %12e %12e \n"%(i,EDdiag[i][0][0],EDdiag[i][0][1],EDdiag[i][1][0][0],EDdiag[i][1][0][1],EDdiag[i][1][1][0],EDdiag[i][1][1][1]))
ofile.close()

sys.exit (0)
